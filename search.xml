<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言隐藏结构体的实现方法</title>
    <url>/2019/11/26/C%E8%AF%AD%E8%A8%80%E9%9A%90%E8%97%8F%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>前些天在搞win32，被windows花里胡哨的结构弄得生不如死，脑子里莫名其妙蹦出了一个想法：能不能定义一些结构体，外部可以用它来定义变量，然而却不能改变它的成员的值, 就像C++，Java一类语言的class一样对数据进行保护。<del>好吧，其实是我还没吃饱撑着随便乱搞</del><br>参照了网上很多的说法，自己胡乱地搞了几个小时给弄出来了。</p>
<h1 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h1><p>直接上代码:<br><br><code>book.cpp</code></p>
<pre><code>#include &quot;book.h&quot;
struct book{
    int price;
    char *name;
};

PBOOK CreateBook(int price, char *name)
{
    PBOOK Book1 = (PBOOK)malloc(sizeof(BOOK));
    Book1-&gt;price = 100;
    Book1-&gt;name = 0;
    return Book1;
}

void FreeBook(PBOOK book)
{
    free(book);
} </code></pre><p>上述源代码文件定义了一个结构和两个函数，同时包含一个自身的头文件</p>
<p><code>book.h</code></p>
<pre><code>#include &lt;malloc.h&gt;
#define PBOOK BOOK *

struct book;
typedef struct book BOOK;

PBOOK CreateBook(int price, char *name);
void FreeBook(PBOOK book);</code></pre><p>头文件中声明了两个函数和结构体，其中用typedef给结构体定义为一种类型。因为源代码文件会包含这个头文件，<strong>所以在源代码中也可以使用头文件中的宏</strong></p>
<p><code>main.cpp</code></p>
<pre><code>#include &lt;stdio.h&gt;
#include &quot;book.h&quot;
int main()
{
    PBOOK a = CreateBook(20, &quot;1231321231&quot;);    // 定义的变量必须是指针类型 
    printf(&quot;%d&quot;,a);
 } </code></pre><p>注意定义的BOOK类型 <strong>必须是指针（BOOK *类型，参照头文件的宏定义）</strong> 一旦定义为</p>
<pre><code>BOOK a；</code></pre><p>就会报错，因为我们包含的头文件只有BOOK的声明，定义为BOOK a的话编译器不知道要给a分配多少内存空间，会引发以下类似类型错误：</p>
<pre><code>[Error] variable &apos;BOOK a&apos; has initializer but incomplete type</code></pre><p>编译通过之后，可以用printf函数打印分配的地址，看下是否分配成功！<br>这样定义的变量的所有对成员的操作都要写到源代码文件中（包括基本的输入输出函数都要），因为在主函数中，这些变量的成员的值无法被直接更改！<br>如：</p>
<p><code>main.cpp</code></p>
<pre><code>#include &lt;stdio.h&gt;
#include &quot;book.h&quot;
int main()
{
    PBOOK a = CreateBook(20, &quot;1231321231&quot;);    // 定义的变量必须是指针类型 
    printf(&quot;%d %d&quot;,a, a-&gt;price);
 } </code></pre><p>编译器会报类型错误，</p>
<pre><code>[Error] invalid use of incomplete type &apos;BOOK {aka struct book}&apos;</code></pre>]]></content>
      <categories>
        <category>C_Struct</category>
      </categories>
      <tags>
        <tag>language C</tag>
        <tag>struct</tag>
      </tags>
  </entry>
  <entry>
    <title>stdarg.h实现可变参数</title>
    <url>/2019/11/24/stdarg-h%E5%AE%9E%E7%8E%B0%E4%B8%8D%E5%AE%9A%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h2 id="stdarg-h实现可变参数"><a href="#stdarg-h实现可变参数" class="headerlink" title="stdarg.h实现可变参数"></a>stdarg.h实现可变参数</h2><ol>
<li>本篇谈论用标准库stdarg.h实现不定参数的方方面面（11/24/2019 11:48:35 PM ）</li>
<li>小技巧：实现格式输入、输出（见更新）</li>
</ol>
<h3 id="stdarg-h的介绍"><a href="#stdarg-h的介绍" class="headerlink" title="stdarg.h的介绍"></a>stdarg.h的介绍</h3><p>stdarg.h是C语言中C标准函数库的头文件，stdarg是由<strong>standard（标准） arguments（参数）</strong>简化而来。</p>
<p>我们常常看到一些函数形如：<strong>printf(const char *fomat,…);</strong><br>这类型的函数就可以用该标准头文件实现。</p>
<h3 id="包含成员"><a href="#包含成员" class="headerlink" title="包含成员"></a>包含成员</h3><p><strong>va_list:</strong> </p>
<p>用来保存<strong>va_start()</strong>、<strong>va_arg()</strong> 和 <strong>va_end()</strong> 这三个宏存储信息的类型。</p>
<p><strong>va_start:</strong></p>
<pre><code>void va_start(va_list list, arg)</code></pre><p>将va_list指向初始参数</p>
<ul>
<li>arg为函数的最后一个非不定参数，如：上面的printf函数，该参数就要填fomat。</li>
</ul>
<p><strong>va_arg：</strong></p>
<pre><code>type va_arg(va_list list, type)</code></pre><p>从list中取出参数并指定为type类型返回，同时移动指针指向下一个参数</p>
<ul>
<li>注意：一定要确保函数的type类型和返回值相同</li>
</ul>
<p><strong>va_end：</strong></p>
<pre><code>void va_end(va_list list)</code></pre><p>释放list，将其置NULL。</p>
<h3 id="具体用法"><a href="#具体用法" class="headerlink" title="具体用法"></a>具体用法</h3><pre><code>char **CreateStrings(int nNum, const char *nName,...);
//生成一个字符串数组

//代码如下：
va_list ParamList;
va_start(ParamList, nName); // 最后一个非可变参数

char **sRet = (char **)malloc(sizeof(char *)*(nNum+1));                 // 创建二级指针
if(sRet!=NULL)
{
    // 此处不用纠结，只是填入nName参数到返回的字符串数组中
    char *sMenber = NULL;
    char *sTmp = NULL;
    sMenber = (char *)malloc(sizeof(char)*strlen(nName));           
    if(strcpy(sMenber, nName)!=NULL)                                // copy string to sMenber
        *sRet = sMenber;                                            // add sMenber to sRet
    else
        return NULL;                                                // test copy
    // 此处不用纠结

    // 正戏开始
    for(i=1; i&lt;=nNum-1; i++)
    {
        sTmp = va_arg(ParamList,char *);                            // 多次从不定参数表取出参数，转为char *类型
        if(sTmp==NULL)
            return NULL;
        sMenber = (char *)malloc(sizeof(char)*strlen(sTmp));
        strcpy(sMenber, sTmp);
        *(sRet+i) = sMenber;                                   
    }
    *(sRet+nNum) = NULL;
}
va_end(ParamList);                                                    // 释放不定参数表</code></pre>]]></content>
      <categories>
        <category>C Library</category>
      </categories>
      <tags>
        <tag>C Std Library</tag>
        <tag>stdarg.h</tag>
      </tags>
  </entry>
  <entry>
    <title>文章常用标志</title>
    <url>/2019/11/20/%E6%96%87%E7%AB%A0%E5%B8%B8%E7%94%A8%E6%A0%87%E5%BF%97/</url>
    <content><![CDATA[<h1 id="常用标识："><a href="#常用标识：" class="headerlink" title="常用标识："></a>常用标识：</h1><h2 id="title"><a href="#title" class="headerlink" title="title:"></a>title:</h2><p>文章标题</p>
<h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><p>文章标签，格式可为：<code>[XXXX,XXXX,...]</code> 或者 <code>- XXXXX\n - XXXXXX\n</code></p>
<h2 id="date"><a href="#date" class="headerlink" title="date:"></a>date:</h2><p>生成日期<br>格式自定义</p>
<h2 id="categories"><a href="#categories" class="headerlink" title="categories:"></a>categories:</h2><p>文章分类</p>
<h2 id="description"><a href="#description" class="headerlink" title="description:"></a>description:</h2><p>文章描述，展示在主页的描述。 </p>
<h2 id="image"><a href="#image" class="headerlink" title="image:"></a>image:</h2><p>待写</p>
<h2 id="password"><a href="#password" class="headerlink" title="password:"></a>password:</h2><p>如果需要给md加密码访问，可加上这个。</p>
<h2 id="top"><a href="#top" class="headerlink" title="top:"></a>top:</h2><p>博文置顶优先级，数值越高越靠前。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
